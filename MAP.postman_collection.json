{
	"info": {
		"_postman_id": "970e8ae9-73b8-489b-ba1f-2de42da12ee3",
		"name": "MAP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21421919"
	},
	"item": [
		{
			"name": "Request directions",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var profiles = pm.environment.get('profiles');",
							"",
							"",
							"if(!profiles){",
							"    profiles = ['cycling', '', 'CYCLING', 'driving', 'driving-traffic', 'traffic', 'walking', 'walking cycling'];",
							"}",
							"",
							"const currentProfile = profiles.shift();",
							"pm.environment.set('currentProfile', currentProfile);",
							"pm.environment.set('profiles', profiles);",
							"",
							"if(pm.environment.get('currentProfile') == 'driving-traffic'){",
							"    pm.environment.set('coordinates', pm.environment.get('cord1'));",
							"} else if(pm.environment.get('currentProfile') == 'walking'){",
							"    pm.environment.set('coordinates', pm.environment.get('invalidcord') + ';' + pm.environment.get('invalidcord'));",
							"} else if(pm.environment.get('currentProfile') == 'driving'){",
							"    pm.environment.set('coordinates', pm.environment.get('crossCountry') + ';' + pm.environment.get('cord2'));",
							"} else if(pm.environment.get('currentProfile') == 'cycling'){",
							"    pm.environment.set('coordinates', pm.environment.get('crossCountry') + ';' + pm.environment.get('crossCountry'));",
							"} else {",
							"    pm.environment.set('coordinates', pm.environment.get('cord1') + ';' + pm.environment.get('cord2'));",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"const profiles = pm.environment.get('profiles');",
							"const currentProfile = pm.environment.get('currentProfile');",
							"",
							"if(profiles && profiles.length > 0){",
							"    postman.setNextRequest('Request directions');",
							"} else {",
							"    postman.setNextRequest(null);",
							"    pm.environment.unset('profiles');",
							"}",
							"",
							"pm.test('Verify the response time', () => {",
							"    pm.expect(pm.response.responseTime).to.lessThan(1000, 'Api is taking too much time');",
							"})",
							"",
							"switch (currentProfile){",
							"    case 'driving':",
							"        pm.test('Verify response code', () => {",
							"            pm.expect(pm.response.code).to.be.eq(200, 'Status code should be 200 for valid request');",
							"        })",
							"        ",
							"        pm.test('Verify route data', () => {",
							"            pm.expect(response.routes[0].country_crossed).to.be.eq(true, 'Country was not crossed but marked as crossed');",
							"            pm.expect(response.routes[0].distance).to.be.eq(4630526, 'Wrong distance calculated');",
							"            pm.expect(response.routes[0].weight_name).to.be.eq('auto', 'Wrong weight name dsiplayed for auto vehicle');",
							"        })",
							"",
							"        pm.test('Verify response status', () => {",
							"            pm.expect(response.code).to.be.eq('Ok', 'Response for a valid request should be OK');",
							"        })",
							"        break;",
							"        ",
							"    case 'walking':",
							"        pm.test('Verify response code', () => {",
							"            pm.expect(pm.response.code).to.be.eq(422, 'Status code should be 422 for invalid request');",
							"        })",
							"        ",
							"        pm.test('Verify response message', () => {",
							"            pm.expect(response.message).to.be.eq('Latitude must be between -90 and 90', 'Error is not explained');",
							"        })",
							"",
							"        pm.test('Verify response status', () => {",
							"            pm.expect(response.code).to.be.eq('InvalidInput', 'Response for an invalid request should be InvalidInput');",
							"        })",
							"        break;",
							"",
							"    case 'cycling':",
							"        pm.test('Verify response code', () => {",
							"            pm.expect(pm.response.code).to.be.eq(200, 'Status code should be 200 for valid request');",
							"        })",
							"        ",
							"        pm.test('Verify route data', () => {",
							"            pm.expect(response.routes[0].distance).to.be.eq(0, 'Wrong distance calculated');",
							"            pm.expect(response.routes[0].weight_name).to.be.eq('cyclability', 'Wrong weight name dsiplayed for auto vehicle');",
							"        })",
							"",
							"        pm.test('Verify response status', () => {",
							"            pm.expect(response.code).to.be.eq('Ok', 'Response for a valid request should be OK');",
							"        })",
							"        break;",
							"",
							"    case 'driving-traffic':",
							"        pm.test('Verify response code', () => {",
							"            pm.expect(pm.response.code).to.be.eq(422, 'Status code should be 422 for invalid request');",
							"        })",
							"        ",
							"        pm.test('Verify response message', () => {",
							"            pm.expect(response.message).to.be.eq('Not enough input coordinates given; minimum number of coordinates is 2.', 'Error is not explained');",
							"        })",
							"",
							"        pm.test('Verify response status', () => {",
							"            pm.expect(response.code).to.be.eq('InvalidInput', 'Response for an invalid request should be InvalidInput');",
							"        })",
							"        break;",
							"",
							"    case 'CYCLING':",
							"        pm.test('Verify response code', () => {",
							"            pm.expect(pm.response.code).to.be.eq(404, 'Status code should be 422 for wrong profile');",
							"        })",
							"        ",
							"        pm.test('Verify response message', () => {",
							"            pm.expect(response.message).to.be.eq('Not Found', 'Error is not explained');",
							"        })",
							"        break;",
							"",
							"    case 'traffic':",
							"        pm.test('Verify response code', () => {",
							"            pm.expect(pm.response.code).to.be.eq(404, 'Status code should be 422 for wrong profile');",
							"        })",
							"        ",
							"        pm.test('Verify response message', () => {",
							"            pm.expect(response.message).to.be.eq('Not Found', 'Error is not explained');",
							"        })",
							"        break;",
							"",
							"    case 'walking cycling':",
							"        pm.test('Verify response code', () => {",
							"            pm.expect(pm.response.code).to.be.eq(404, 'Status code should be 422 for wrong profile');",
							"        })",
							"        ",
							"        pm.test('Verify response message', () => {",
							"            pm.expect(response.message).to.be.eq('Not Found', 'Error is not explained');",
							"        })",
							"        break;",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.mapbox.com/directions/v5/mapbox/{{currentProfile}}/{{coordinates}}?access_token={{token}}",
					"protocol": "https",
					"host": [
						"api",
						"mapbox",
						"com"
					],
					"path": [
						"directions",
						"v5",
						"mapbox",
						"{{currentProfile}}",
						"{{coordinates}}"
					],
					"query": [
						{
							"key": "access_token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		}
	]
}